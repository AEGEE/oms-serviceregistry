FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# oms-serviceregistry

The service-registry reads the docker-compose file and identifies services by their labels. This service is mainly a nice JSON interface to the docker-compose.yml

Also it provides a token registry, where each service which has access to the API key can get an access token or get another access token checked. This can be used for mutual validation of services.

## Get all services [/services]

### Get all services [GET]

+ Response 200 (application/json)

        {
        "success": 1,
        "data": [
            {
                "name": "omsserviceregistry",
                "categories": [],
                "port": 7000,
                "description": "",
                "enabled": false,
                "status_url": "",
                "backend_url": "http://omsserviceregistry:80"
            },
            {
                "name": "alastair",
                "categories": [
                    {
                        "name": "cooking",
                        "priority": 10
                    }
                ],
                "port": 4000,
                "description": "",
                "enabled": true,
                "status_url": "",
                "backend_url": "http://alastair:4000",
                "modules_url": "http://alastair:4000/static/getModules.json",
                "frontend_url": "/services/alastair",
                "up": true
            }
        ]}


## Get by servicename [/services/{servicename}]

### Get by servicename [GET]

Returns data about a specific service. The frontend-url is optional and might not be available, the backend-url will be present though. Depending on configuration it will either return a route through the traefik proxy or a route through the swarm DNS loadbalancer.

+ Response 200 (application/json)

        {
            "success": true,
            "data": {
                "name": "alastair",
                "categories": [
                    {
                        "name": "cooking",
                        "priority": 10
                    }
                ],
                "port": 4000,
                "description": "",
                "enabled": true,
                "status_url": "",
                "backend_url": "http://alastair:4000",
                "modules_url": "http://alastair:4000/static/getModules.json",
                "frontend_url": "/services/alastair",
                "up": true
            }
        }
        

## Get all categories [/categories]

### Get all categories [GET]

Returns all categories that were registered by any service

+ Response 200 (application/json)

        {
            "success": true,
            "data": [
                "users",
                "antennae",
                "notifications"
            ]
        }

## Get by category [/category/{categoryname}]

### Get by category [GET]

Returns all services that serve that category, ordered by the priority in those fields

+ Response 200 (application/json)

        {
            "success": true,
            "data": [
                {
                    "name": "omscore-nginx",
                    "enabled": true,
                    "description": "The core module with both backend and frontend",
                    "backend": "http://omscore-nginx:80",
                    "frontend": "/",
                    "priority": 10
                }
            ]
        }



## List all frontend modules [/frontends]

### List all frontend modules [GET]

Frontend modules are registered independently of the backend but still have microservice affinity. There is no backend url exposed here, as those pages will only be necessary to be reached from the frontend

+ Response 200 (application/json)

        {
            "success": true,
            "data": [
                {
                    "pages": [
                        {
                            "name": "Organizers view",
                            "code": "alastair_organizer",
                            "module_link": "static/organizers_view/organizers_view.js",
                            "icon": "fa fa-lightbulb-o"
                        },
                        {
                            "name": "Shop view",
                            "code": "alastair_shopping",
                            "module_link": "static/shopping_view/shopping_view.js",
                            "icon": "fa fa-list"
                        },
                        {
                            "name": "Chef view",
                            "code": "alastair_chef",
                            "module_link": "static/chef_view/chef_view.js",
                            "icon": "fa fa-cutlery"
                        }
                    ],
                    "name": "Alastair",
                    "code": "alastair-cookie"
                }
            ]
        }