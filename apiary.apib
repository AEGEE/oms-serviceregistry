FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# oms-serviceregistry

The service-registry reads the docker-compose file and identifies services by their labels. This service is mainly a nice JSON interface to the docker-compose.yml

Also it provides a token registry, where each service which has access to the API key can get an access token or get another access token checked. This can be used for mutual validation of services.

## Get by servicename [/service/{servicename}]

### Get by servicename [GET]

Returns data about a specific service. The frontend-url is optional and might not be available, the backend-url will be present though. Depending on configuration it will either return a route through the traefik proxy or a route through the swarm DNS loadbalancer.

+ Response 200 (application/json)

        {
            "success": true,
            "data": {
                "name": "omsevents",
                "backend_url": "http://traefik/omsevents/api",
                "frontend_url": "http://exampledomain/omsevents/api",
                "categories": [
                    {
                        "name": "events",
                        "priority": 10
                    }
                ]
            }
        }

## Get by category [/category/{categoryname}]

### Get by category [GET]

Returns all services that serve that category, ordered by the priority in those fields

+ Response 200 (application/json)

        {
            "success": true,
            "data": [
                {
                    "name": "omscore",
                    "description": "The core module"
                    "backend_url": "http://omscore/api",
                    "frontend_url": "http://exampledomain/api",
                },
                {
                    "name": "supermicro",
                    "description": "A new microservice that is extremely powerful",
                    "backend_url": "http://traefik/supermicro/api",
                    "frontend_url": "http://exampledomain/supermicro/api",
                }
            ]
        }

## Security Tokens [/token]

### Receive a new token [POST]

Generates a token for a microservice instance. The only proof of authenticy is the posession of the api key that is generated by the tunnel upon startup and written to a file, though even that is rather an optional thing.

+ Request (application/json)

        {
            "api_key": "<api key file contents>"
            "name": "omsevents"
        }
        
+ Response 200 (application/json)

        {
            "success": true,
            "data": {
                "instance_key": "<some blibberish>",
                "expires": "2018-03-09T10:28:57+00:00"
            }
        }

### Check the validity of a token [GET]

Checks the validity of a token

+ Request (application/json)

        {
            "instance_key": "<some blibberish>",
        }
        
+ Response 200 (application/json)

        {
            "success": true,
            "data": {
                "valid": true,
                "expires": "2018-03-09T10:28:57+00:00",
                "name": "omsevents"
            }
        }


## Frontends [/frontend]

### List all frontend modules [GET]

Frontend modules are registered independently of the backend but still have microservice affinity. There is no backend url exposed here, as those pages will only be necessary to be reached from the frontend

+ Response 200 (application/json)

        {
            "success": true,
            "data": [
                {
                    "servicename": "omsevents-frontend",
                    "frontend_url": "http://exampledomain/omsevents",
                    "pages": [{
                        "name": "All events",
                        "code": "events",
                        "module_link": "frontend/all/eventsController.js",
                        "icon": "fa fa-ticket"
                    }, {
                        "name": "Event admin",
                        "code": "eventadmin",
                        "module_link": "frontend/admin/adminController.js",
                        "icon": "fa fa-wrench"
                    }]
                }
            ]
        }